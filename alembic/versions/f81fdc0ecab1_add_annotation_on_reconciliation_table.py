"""Add annotation on Reconciliation table

Revision ID: f81fdc0ecab1
Revises: 3a75621e4066
Create Date: 2025-05-29 10:44:56.477399

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f81fdc0ecab1'
down_revision = '3a75621e4066'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create the statusenum type if it doesn't exist
    statusenum = postgresql.ENUM('PROCESSING', 'READY', 'FAIL', 'COMPLETED', 'CLOSED', 'PENDING', 'OPEN', 'REQUEST_APPROVAL', 'APPROVED', name='statusenum')
    statusenum.create(op.get_bind(), checkfirst=True)
    
    # Update ReconAnnotation Status enum with explicit USING clause
    op.execute('ALTER TABLE ccs."ReconAnnotation" ALTER COLUMN "Status" TYPE statusenum USING "Status"::text::statusenum')
    
    # Update Reconciliation table columns to support string values instead of numeric
    op.alter_column('Reconciliation', 'AirFlightDate',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirQty',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirUnitPrice',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirSubTotal',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirTax',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirTotalIncTax',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirInvoiceDate',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirPaidDate',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatFltDate',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatPax',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatQty',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatUnitPrice',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatTotalAmount',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AmountDif',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'QtyDif',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True,
               schema='ccs')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Revert Reconciliation table columns back to original types
    op.alter_column('Reconciliation', 'QtyDif',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AmountDif',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatTotalAmount',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatUnitPrice',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatQty',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatPax',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'CatFltDate',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirPaidDate',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirInvoiceDate',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirTotalIncTax',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirTax',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirSubTotal',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirUnitPrice',
               existing_type=sa.String(),
               type_=sa.NUMERIC(precision=15, scale=2),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirQty',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True,
               schema='ccs')
    op.alter_column('Reconciliation', 'AirFlightDate',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True,
               schema='ccs')
    
    # Revert ReconAnnotation Status enum back to original type
    # Note: You might need to adjust this based on what the original type was
    op.execute('ALTER TABLE ccs."ReconAnnotation" ALTER COLUMN "Status" TYPE varchar USING "Status"::text')
    
    # Drop the statusenum type if no other tables are using it
    # Note: Be careful with this in production - only drop if you're sure no other tables use this enum
    # statusenum = postgresql.ENUM(name='statusenum')
    # statusenum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
